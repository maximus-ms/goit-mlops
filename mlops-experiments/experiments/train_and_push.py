import os
import time
import pickle
from collections import defaultdict
from dotenv import load_dotenv
load_dotenv()

import mlflow
from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
from sklearn.datasets import load_iris
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, log_loss

BEST_MODEL_PATH = "../best_model/model.pkl"

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
learning_rate_list = [0.01, 0.05, 0.1]  # –†–æ–∑—à–∏—Ä—é—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –±—ñ–ª—å—à–æ—ó —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
epochs_list = [50, 100]
experiment_name = f"Iris Classification [{time.strftime('%Y-%m-%d %H:%M:%S')}]"

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ MLflow
mlflow.set_tracking_uri(os.environ["MLFLOW_TRACKING_URI"])

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä—É—î–º–æ PushGateway
PUSHGATEWAY_URL = os.environ.get("PUSHGATEWAY_URL")

# –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
experiment_id = mlflow.create_experiment(experiment_name)
results = defaultdict(dict)

best_accuracy = 0
best_model = None

# –°—Ç–≤–æ—Ä—é—î–º–æ Gauge –¥–ª—è accuracy —Ç–∞ loss –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø—É—Å–∫—ñ–≤
registry = CollectorRegistry()
g_accuracy = Gauge('model_accuracy', 'Model Accuracy', ['run_id', 'learning_rate', 'epochs', 'experiment_id'], registry=registry)
g_loss = Gauge('model_loss', 'Model Loss', ['run_id', 'learning_rate', 'epochs', 'experiment_id'], registry=registry)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Iris dataset
X, y = load_iris(return_X_y=True)

# –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—É —Ç–∞ —Ç–µ—Å—Ç–æ–≤—É –≤–∏–±—ñ—Ä–∫–∏ –∑ –±—ñ–ª—å—à–∏–º test_size,
# —â–æ–± –∑–º–µ–Ω—à–∏—Ç–∏ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–¥—Ç–æ –ø—Ä–æ—Å—Ç–∏—Ö –ø—ñ–¥–≤–∏–±—ñ—Ä–æ–∫
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.35, random_state=42
)

for learning_rate in learning_rate_list:
    for epochs in epochs_list:
        run_name = f"Learning Rate: {learning_rate}, Epochs: {epochs}"
        print("\n--------------------------------\n")
        print(f"üîç Starting run: {run_name}")
        with mlflow.start_run(experiment_id=experiment_id, run_name=run_name):
            mlflow.log_param("learning_rate", learning_rate)
            mlflow.log_param("epochs", epochs)

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SGDClassifier –∑–∞–º—ñ—Å—Ç—å LogisticRegression, —â–æ–± –º–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ learning_rate
            model = SGDClassifier(
                loss='log_loss',  # –¥–ª—è –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó
                learning_rate='constant',
                eta0=learning_rate,  # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ learning_rate
                max_iter=epochs,
                random_state=42
            )
            model.fit(X_train, y_train)

            y_pred = model.predict(X_test)
            y_proba = model.predict_proba(X_test)

            acc = accuracy_score(y_test, y_pred)
            loss = log_loss(y_test, y_proba)

            mlflow.log_metric("accuracy", acc)
            mlflow.log_metric("loss", loss)
            
            # –î–æ–¥–∞—î–º–æ signature —Ç–∞ input_example –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–æ–¥–µ–ª—ñ
            mlflow.sklearn.log_model(model, name="model")
            
            # –ü—É—à–∏–º–æ –º–µ—Ç—Ä–∏–∫–∏ –≤ PushGateway –∑ –º—ñ—Ç–∫–æ—é run_id
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º—ñ—Ç–∫–∞–º–∏
            run_id = mlflow.active_run().info.run_id
            g_accuracy.labels(run_id=run_id, learning_rate=str(learning_rate), epochs=str(epochs), experiment_id=str(experiment_id)).set(acc)
            g_loss.labels(run_id=run_id, learning_rate=str(learning_rate), epochs=str(epochs), experiment_id=str(experiment_id)).set(loss)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –≤ PushGateway
            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è job, —è–∫–µ –≤–∫–ª—é—á–∞—î experiment_id
                job_name = f"iris_classification_{experiment_id}"
                push_to_gateway(PUSHGATEWAY_URL, job=job_name, registry=registry)
                print(f"‚úÖ Metrics pushed to PushGateway with run_id: {run_id}")
            except Exception as e:
                print(f"‚ùå Failed to push metrics to PushGateway: {e}")

            results[acc] = {
                "learning_rate": learning_rate,
                "epochs": epochs,
                "accuracy": acc,
                "loss": loss,
            }
            print(f"‚úÖ Run {run_name} completed, results: {results[acc]}")

            if acc > best_accuracy:
                best_accuracy = acc
                best_model = model


# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É –º–æ–¥–µ–ª—å —É –ª–æ–∫–∞–ª—å–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
os.makedirs("best_model", exist_ok=True)
model_path = BEST_MODEL_PATH
with open(model_path, 'wb') as f:
    pickle.dump(best_model, f)

# –†–µ—î—Å—Ç—Ä—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É –º–æ–¥–µ–ª—å –≤ MLflow Model Registry
print("\n--------------------------------\n")
print("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ –≤ MLflow...")
print(f"* –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å: {best_model}")
print(f"* –ù–∞–π–∫—Ä–∞—â–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å: {best_accuracy}\n")
with mlflow.start_run(experiment_id=experiment_id, run_name="Best Model Registration", nested=True):
    # –õ–æ–≥—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É —Ç–æ—á–Ω—ñ—Å—Ç—å —è–∫ –º–µ—Ç—Ä–∏–∫—É
    mlflow.log_metric("best_accuracy", best_accuracy)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ
    best_params = results[best_accuracy]
    for param_name, param_value in best_params.items():
        if param_name not in ["accuracy", "loss"]:
            mlflow.log_param(param_name, param_value)
    
    # –õ–æ–≥—É—î–º–æ —Å–∞–º—É –º–æ–¥–µ–ª—å –∑ —Å–∏–≥–Ω–∞—Ç—É—Ä–æ—é —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º
    model_info = mlflow.sklearn.log_model(best_model, name="best_model", registered_model_name="iris_classifier")
    
    # –î–æ–¥–∞—î–º–æ —Ç–µ–≥–∏ –¥–æ –∑–∞–ø—É—Å–∫—É
    mlflow.set_tag("best_model_path", model_path)
    mlflow.set_tag("model_type", type(best_model).__name__)
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞ –≤ MLflow Model Registry")
    print(f"üìä Model URI: {model_info.model_uri}")
    print(f"üîó –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –º–æ–¥–µ–ª—ñ: mlflow.sklearn.load_model('{model_info.model_uri}')")
